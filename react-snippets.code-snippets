{
    "Form": {
        "prefix": "form",
        "body": [
            "const formSchema = z.object({",
            "});",
            "",
            "const { formState, control, handleSubmit, register } = useForm<z.infer<typeof formSchema>>({",
            "    resolver: zodResolver(formSchema)",
            "});",
        ]
    },
    "useQuery": {
        "prefix": "useQuery",
        "body": [
            "    const [finished, setQuerys] = useQuery()"
        ]
    },
    "Query": {
        "prefix": "query",
        "body": [
            "setQuerys(() => {",
            "   ",
            "})",
        ]
    },
    "Querys": {
        "prefix": "querys",
        "body": [
            "setQuerys([",
            "   () => {",
            "       ",
            "   }",
            "])"
        ]
    },
    "useState": {
        "prefix": "useState",
        "body": [
            "const [state, setState] = useState()"
        ]
    },
    "useEffect":{
        "prefix": "useEffect",
        "body": [
            "useEffect(() => {",
            "   ",
            "    }, [])"
        ]
    },
    "Component": {
        "prefix": "component",
        "body": [
            "import React, { LegacyRef, forwardRef, useContext } from 'react';",
            "import useSelector from '../utils/hooks/selector-hooks';",
            "",
            "interface ${1:${TM_FILENAME_BASE/(?:^|-)(\\w)/${1:/upcase}/g}}Props {",
            "    children: React.ReactNode",
            "    className: string",
            "    ref: any",
            "    onClick?: (e: any) => any",
            "}",
            "",
            "const ${1:${TM_FILENAME_BASE/(?:^|-)(\\w)/${1:/upcase}/g}}Container = forwardRef((_: ${1:${TM_FILENAME_BASE/(?:^|-)(\\w)/${1:/upcase}/g}}Props, ref: LegacyRef<HTMLDivElement>) => {",
            "    return (",
            "        <div",
            "            ref={ref}",
            "            className={_.className}",
            "        >",
            "            {_.children}",
            "        </div>",
            "    );",
            "})",
            "",
            "const ${TM_FILENAME_BASE/(.)(-)([a-zA-Z])/${1:/downcase}${3:/upcase}/g}Variants = {",
            "    default: (props: ${1:${TM_FILENAME_BASE/(?:^|-)(\\w)/${1:/upcase}/g}}Props, ref: any) => {",
            "        return (",
            "            <${1:${TM_FILENAME_BASE/(?:^|-)(\\w)/${1:/upcase}/g}}Container",
            "                {...props}",
            "                ref={ref}",
            "                className='' />",
            "        )",
            "    }",
            "}",
            "",
            "const ${1:${TM_FILENAME_BASE/(?:^|-)(\\w)/${1:/camelcase}/g}} = useSelector<keyof typeof ${TM_FILENAME_BASE/(.)(-)([a-zA-Z])/${1:/downcase}${3:/upcase}/g}Variants, ${1:${TM_FILENAME_BASE/(?:^|-)(\\w)/${1:/upcase}/g}}Props>(${TM_FILENAME_BASE/(.)(-)([a-zA-Z])/${1:/downcase}${3:/upcase}/g}Variants)",
            "",
            "export default ${1:${TM_FILENAME_BASE/(?:^|-)(\\w)/${1:/camelcase}/g}}"
        ],
        "description": "Cria um componente React Accordion"
    },
}